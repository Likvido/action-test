name: "Run all unit tests"
description: "Uses dotnet CLI to run all unit tests in the given directory/project/solution"
inputs:
  test-target:
    description: 'The path to the directory/project/solution to give to dotnet test (default is empty, which means the tool will guess)'
    required: false
    default: ''
  dotnet-version:
    description: 'The version of .NET to use (default is empty, which uses the latest version)'
    required: false
    default: ''
  framework:
    description: 'The target framework to run tests for (default is to run for all target frameworks in the csproj files for the unit test projects)'
    required: false
    default: ''
  logger:
    description: 'The logger to use. Default is html'
    required: false
    default: 'html'
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Run tests
      env:
        # FRAMEWORK is used for "shell parameter expansion" below, which means the -f parameter is only inserted if a framework is provided
        FRAMEWORK: ${{ inputs.framework }}
      run: dotnet test --configuration Release --logger ${{ inputs.logger }} --results-directory "TestResults" ${FRAMEWORK:+"-f"} ${FRAMEWORK:+"$FRAMEWORK"} ${{ inputs.test-target }}
      shell: bash

    - name: Upload dotnet test results
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: TestResults
        if-no-files-found: ignore
        
